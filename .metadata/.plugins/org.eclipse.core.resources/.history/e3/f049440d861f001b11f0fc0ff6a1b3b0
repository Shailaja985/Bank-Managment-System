package com.bms.app.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
import java.util.Optional;

import com.bms.app.BmsUserRegisterApplication;
import com.bms.app.data.UserEntity;
import com.bms.app.repository.UserRepository;
import com.bms.app.service.UserService;
import com.bms.app.shared.UserDto;

import io.swagger.annotations.ApiOperation;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;


@RestController
@RequestMapping("/v1")
public class UserController {
	
	@Autowired
	private UserService userService;
	
	@Autowired
	private UserRepository userRepository;
	
	Logger log = LoggerFactory.getLogger(BmsUserRegisterApplication.class);
	
	@GetMapping("/")
	public String welcome() {
		return "welcome";
	}
	
	@HystrixCommand(fallbackMethod = "breaker")
	@PostMapping("/register")
	@ApiOperation(value = "please provide the mandatory details as given in model schema")
	public UserEntity createUser(@RequestBody UserDto userDto) {
		
		
		
		return userService.CreateUser(userDto);
	}
	
	public UserEntity breaker(@RequestBody UserDto userDto) {
		return null;

	}
	
	@HystrixCommand(fallbackMethod = "getidbreaker")
	@GetMapping("/user/{userId}")
	public UserEntity getUserById(@PathVariable long userId) throws Exception {
		Optional<UserEntity> user = userRepository.findById(userId);
		if(user.isPresent()) {
			return user.get();
		}
		else {
			throw new RuntimeException("user not found with given id");
		}
		
	}
	
	public UserEntity getidbreaker(long userId) throws Exception {
		return null;
	}
	
	@HystrixCommand(fallbackMethod = "getbreaker")
	@GetMapping("/user")
	@ApiOperation(value = "Click here,to review the customer details")
	public List<UserEntity> getAllUser() {
		log.trace("Customer details method is accesed");
		return (List<UserEntity>) userRepository.findAll();
		
	}
	public List<UserEntity> getbreaker() {
		return null;
	}
}
