package com.bms.app.service;

import java.util.concurrent.ThreadLocalRandom;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.bms.app.data.UserEntity;

import com.bms.app.repository.UserRepository;
import com.bms.app.shared.UserDto;

@Service
public class UserServiceImpl implements UserService {
	
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private BCryptPasswordEncoder bCryptPasswordEncoder;
	
	private static String random() {
		long smallest=1000_0000_0000_0000L;
		long largest=9999_0000_0000_0000l;
		
		 String random=String.valueOf(ThreadLocalRandom.current().nextLong(smallest,largest+1));
		return random;
	}

	@Override
	public UserEntity CreateUser(UserDto userDto) {
		userDto.setAccountNumber(random());
		userDto.setEncryptedPassword(bCryptPasswordEncoder.encode(userDto.getPassword()));
		
		ModelMapper modelMapper=new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
		UserEntity userEntity=modelMapper.map(userDto , UserEntity.class);
		userRepository.save(userEntity);
		
		return userEntity;
	}


}
