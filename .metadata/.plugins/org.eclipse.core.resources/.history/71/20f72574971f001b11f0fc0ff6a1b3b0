package com.bms.app.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.bms.app.data.UserEntity;
import com.bms.app.repository.UserRepository;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

import io.swagger.annotations.ApiOperation;

@RestController
@RequestMapping("/v1/customerupdate")
public class UserController {
	
	@Autowired
	private UserRepository userRepository;
	
	@HystrixCommand(fallbackMethod="breaker")
	@PutMapping("/{userId}")
	@ApiOperation(value = "Use this to update the user details")
	public UserEntity updateUser(@RequestBody UserEntity userEntity, @PathVariable long userId) {
			if(userEntity==null) {
				throw new RuntimeException();
			}
		return userRepository.findById(userId).map(user -> {
			user.setAddress(userEntity.getAddress());
			user.setCounty(userEntity.getCounty());
			user.setEmail(userEntity.getEmail());
			user.setContactNumber(userEntity.getContactNumber());
			user.setState(userEntity.getState());
			user.setUserName(userEntity.getUserName());
			
			return userRepository.save(user);
		}).orElseGet(() -> {
			userEntity.setUserId(userId);
			return userRepository.save(userEntity);

		});

	}
	
	
		public UserEntity breaker(@RequestBody UserEntity userEntity, @PathVariable int userId) {
				
				return userEntity;
				
			}
}
