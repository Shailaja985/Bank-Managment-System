package com.bms.app;

import org.junit.jupiter.api.Test;
import static org.mockito.Mockito.when;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;

import com.bms.app.controller.UserController;
import com.bms.app.data.UserEntity;
import com.bms.app.repository.UserRepository;
import com.bms.app.repository.UserRepositoryImpl;
import com.bms.app.service.UserServiceImpl;
import com.bms.app.shared.UserDto;
import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest
class BmsUserRegisterApplicationTests {

	@Test
	void contextLoads() {
	}
	
	@InjectMocks
	UserServiceImpl userServiceImpl;
	
	
	
	@InjectMocks
	UserController userController;

	@Mock
	UserRepositoryImpl userRepositoryImpl;
	
	@Mock
	UserRepository userRepository;
	
	@Test
	 void testUserRegistration() {
		/**this.userId = userId;
		this.userName = userName;
		this.address = address;
		this.state = state;
		this.county = county;
		this.email = email;
		this.panNumber = panNumber;
		this.contactNumber = contactNumber;
		this.dateOfBirth = dateOfBirth;
		this.accountType = accountType;
		this.accountNumber = accountNumber;
		this.password = password;
		**/
		
		UserEntity userEntity=new UserEntity(101,"shails","klnagar","kar","Ind","shails@gmail.com",
				       "7987dhf","99999999","29/01/2019","self","1234567890123456","password1");
		UserDto userDto=new UserDto("shails","klnagar","kar","Ind","shails@gmail.com",
			       "7987dhf","99999999","29/01/2019","self","password1");
		when(userRepositoryImpl.save(userEntity)).thenReturn(userEntity);

		UserEntity re = userServiceImpl.CreateUser(userDto);
		assertThat(re).isNotNull();

	}
	
	@Test
	 void testUserRegistrationfail() {
		UserEntity userEntity = new UserEntity();
		UserDto userDto=new UserDto("shails","shails@gmail.com","password1");
		when(userRepositoryImpl.save(userEntity)).thenReturn(userEntity);

		UserEntity re = userServiceImpl.CreateUser(userDto);
		assertThat(re).isNotNull();

	}
	
	@Test
	   void testUserRegistrationfail2() {
		UserEntity userEntity = new UserEntity();
		UserDto userDto = new UserDto();
		when(userRepositoryImpl.save(userEntity)).thenReturn(userEntity);

		UserEntity re = userServiceImpl.CreateUser(userDto);
		assertThat(re).isNotNull();


		}
	
	@Test
	 void testUserRegistrationfail3() {
		UserEntity userEntity=new UserEntity(101,"shails","klnagar","kar","Ind","shails@gmail.com",
			       "7987dhf","99999999","29/01/2019","self","1234567890123456","password1");
		UserDto userDto = new UserDto();
		when(userRepositoryImpl.save(userEntity)).thenReturn(userEntity);

		UserEntity re = userServiceImpl.CreateUser(userDto);
		assertThat(re).isNotNull();
	}
	
	@Test
	 void testUserRegistrationfail4() {
		UserEntity userEntity=new UserEntity(101,"s","klnagar","kar","Ind","shails@gmail.com",
			       "7987dhf","99999999","29/01/2019","self","1234567890123456","password1");
		UserDto userDto = new UserDto();
		when(userRepositoryImpl.save(userEntity)).thenReturn(userEntity);

		UserEntity re = userServiceImpl.CreateUser(userDto);
		assertThat(re).isNotNull();
	}
	
	@Test
	 void testUserRegistrationfail5() {
		UserEntity userEntity=new UserEntity(101,"shails","klnagar","kar","Ind","shails@gmail",
			       "7987dhf","99999999","29/01/2019","self","1234567890123456","password1");
		UserDto userDto = new UserDto();
		when(userRepositoryImpl.save(userEntity)).thenReturn(userEntity);

		UserEntity re = userServiceImpl.CreateUser(userDto);
		assertThat(re).isNotNull();
	}
	
	@Test
	 void testbreaker() {
		UserEntity userEntity=new UserEntity(101,"shails","klnagar","Kar","Ind","shails@gmail.com",
			       "7987dhf","99999999","29/01/2019","self","1234567890123456","password1");
		UserDto userDto=new UserDto("shails","shails@gmail.com","password1");
		when(userRepositoryImpl.save(userEntity)).thenReturn(userEntity);
	
		UserEntity re = userServiceImpl.CreateUser(userDto);
		assertThat(re).isNotNull();
		
	}
	
	@Test
	void testset() {
		UserEntity u1= new UserEntity();
		u1.setUserId(100);
		u1.setAccountType("sb");
		u1.setPanNumber("ABCDEF12345");
		u1.setContactNumber("8978127720");
		u1.setCounty("Ind");
		u1.setState("AP");
		u1.setEmail("a@gmail.com");
		u1.setAddress("tenali");
		u1.setPassword("Prafu@29");
		u1.setUserName("prafulla");
		u1.setAccountNumber("2213726038414410L");
		
		UserDto s1 = new UserDto();
		s1.setAccountType("sb");
		s1.setPanNumber("ABCDEF12345");
		s1.setContactNumber("8978127720");
		s1.setCountry("Ind");
		s1.setState("AP");
		s1.setEmailId("a@gmail.com");
		s1.setAddress("tenali");
		s1.setPassword("Prafu@29");
		s1.setUserName("prafulla");
		
		when(udao.save(u1)).thenReturn(u1);
		ApiResponse re = new ApiResponse();
		re.setMessage("Working");
		re.setResult(u1);


		//ApiResponse re = serviceImpl.signUp(s1);
		assertThat(re).isNotNull();
		
	}
	
	
}
