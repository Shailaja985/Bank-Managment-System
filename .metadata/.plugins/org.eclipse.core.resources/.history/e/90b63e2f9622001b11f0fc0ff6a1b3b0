package com.bms.app;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;

import com.bms.app.controller.LoginController;
import com.bms.app.controller.UserController;
import com.bms.app.data.UserEntity;
import com.bms.app.model.LoginModel;
import com.bms.app.repository.LoginRepository;
import com.bms.app.repository.UserRepository;
import com.bms.app.repository.UserRepositoryImpl;
import com.bms.app.service.LoginServiceImpl;
import com.bms.app.service.UserServiceImpl;
import com.bms.app.shared.UserDto;
import org.junit.jupiter.api.Assertions;

@SpringBootTest(classes = BmsUserLoginApplication.class)
class BmsUserLoginApplicationTests {

	@InjectMocks
	UserServiceImpl serviceImpl;
	
	@InjectMocks
	LoginServiceImpl loginserviceImpl;
	
	
	
	@InjectMocks
	UserController userController;
	
	@InjectMocks
	LoginController loginController;

	@Mock
	UserRepositoryImpl userRepositoryImpl;
	
	@Mock
	UserRepository userRepository;
	
	@Mock
	LoginRepository loginRepository;
	
	@Test
	void testlogin() {
		UserEntity userEntity=new UserEntity(101,"shails","klnagar","kar","Ind","shails@gmail.com",
			       "7987dhf","99999999","29/01/2019","self",1234567890123456L,"password1");
		UserDto userDto=new UserDto("shails","klnagar","kar","Ind","shails@gmail.com",
		       "7987dhf","99999999","29/01/2019","self","password1");
		when(userRepository.save(userEntity)).thenReturn(userEntity);
		LoginModel loginModel = new LoginModel("shails","password1");	
	}
	
	@Test
	 void testregdcustfail() {
		UserEntity userEntity = new UserEntity();
		UserDto userDto=new UserDto("shails","klnagar","kar","Ind","shails@gmail.com",
			       "7987dhf","99999999","29/01/2019","self","password1");
		when(userRepositoryImpl.save(userEntity)).thenReturn(userEntity);

		UserEntity userEntity1 = serviceImpl.CreateUser(userDto);
		assertThat(userEntity1).isNotNull();

	}
	
	@Test
	   void testregdcustfail2() {
		UserEntity userEntity = new UserEntity();
		UserDto userDto = new UserDto();
		when(userRepositoryImpl.save(userEntity)).thenReturn(userEntity);

		UserEntity userEntity1 = serviceImpl.CreateUser(userDto);
		assertThat(userEntity1).isNotNull();

		}
//	@Test
//	void testlogin1() {
//		UserEntity userEntity=new UserEntity(101,"anna","klnagar","kar","Ind","shails@gmail.com",
//			       "7987dhf","99999999","29/01/2019","self",1234567890123456L,"password1");
//		UserDto userDto=new UserDto("anna","klnagar","kar","Ind","shails@gmail.com",
//		       "7987dhf","99999999","29/01/2019","savings","password1234");
//		when(userRepository.save(userEntity)).thenReturn(userEntity);
//		LoginModel loginModel = new LoginModel("shails","password1234");	
//	}
	
	
	@Test
	void testbreaker() {
		UserEntity userEntity=new UserEntity(101,"shails","klnagar","kar","Ind","shails@gmail.com",
			       "7987dhf","99999999","29/01/2019","self",1234567890123456L,"password1");
		UserDto userDto=new UserDto("shails","klnagar","kar","Ind","shails@gmail.com",
		       "7987dhf","99999999","29/01/2019","self","password1");
		when(userRepository.save(userEntity)).thenReturn(userEntity);
		LoginModel login = new LoginModel("shails","password1");
		UserEntity re = loginController.breaker(login);
		//assertThat(re).isNotNull();
		
	}
	
	@Test
	void testset() {
		UserEntity userEntity= new UserEntity();
		u1.setRegd_id(100);
		u1.setAccntType("sb");
		u1.setPanNum("ABCDEF12345");
		u1.setPhoneNum("8978127720");
		u1.setCountry("Ind");
		u1.setState("AP");
		u1.setEmailId("a@gmail.com");
		u1.setAddress("tenali");
		u1.setPassword("Prafu@29");
		u1.setUserName("prafulla");
		u1.setAccntNum(2213726038414410L);
		
		SignUpDto s1 = new SignUpDto();
		s1.setAccntType("sb");
		s1.setPanNum("ABCDEF12345");
		s1.setPhoneNum("8978127720");
		s1.setCountry("Ind");
		s1.setState("AP");
		s1.setEmailId("a@gmail.com");
		s1.setAddress("tenali");
		s1.setPassword("Prafu@29");
		s1.setUserName("prafulla");
		
		when(udao.save(u1)).thenReturn(u1);
		ApiResponse re = new ApiResponse();
		re.setMessage("Working");
		re.setResult(u1);


		//ApiResponse re = serviceImpl.signUp(s1);
		assertThat(re).isNotNull();
		
	}
	
//	@Test
//	void testbreaker1() {
//		UserEntity userEntity=new UserEntity(101,"shails","klnagar","kar","Ind","shails@gmail.com",
//			       "7987dhf","99999999","29/01/2019","self",1234567890123456L,"password1");
//		UserDto userDto=new UserDto("shails","klnagar","kar","Ind","shails@gmail.com",
//		       "7987dhf","99999999","29/01/2019","self","password1234");
//		when(userRepository.save(userEntity)).thenReturn(userEntity);
//		LoginModel login = new LoginModel("anna","password1234");
//		UserEntity re = loginController.breaker(login);
//		//assertThat(re).isNotNull();
//		
//	}
	
	@Test
    void testApplication()
    {
		BmsUserLoginApplication.main(new String[]{
                "--spring.main.web-environment=false",
                "--spring.autoconfigure.exclude=blahblahblah",
               
        });
    }
}
